# -*- coding: utf-8 -*-
"""app.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNvwKEHPvx1AD0bHZK5sz5FxOYo38bLs
"""
import subprocess
import sys

# Install opencv-python if not already installed
try:
    import cv2
except ImportError:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "opencv-python-headless"])
    import cv2

import os
import requests
import pandas as pd
import numpy as np
import cv2
from sklearn.metrics.pairwise import cosine_similarity
from tensorflow.keras.applications.vgg16 import VGG16, preprocess_input
from tensorflow.keras.preprocessing import image
from tensorflow.keras.models import Model
import streamlit as st
import matplotlib.pyplot as plt

# Section 1: Download Images
def download_images(image_links, output_folder):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)

    for idx, link in enumerate(image_links, 1):
        try:
            response = requests.get(link, stream=True)
            if response.status_code == 200:
                file_path = os.path.join(output_folder, f'image_{idx}.jpg')
                with open(file_path, 'wb') as file:
                    for chunk in response.iter_content(1024):
                        file.write(chunk)
                print(f"Downloaded: {file_path}")
            else:
                print(f"Failed to download {link}")
        except Exception as e:
            print(f"Error downloading {link}: {e}")

# Section 2: Model Setup
base_model = VGG16(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
model = Model(inputs=base_model.input, outputs=base_model.output)

# Section 3: Extract Features from Image
def extract_features(img_path):
    img = image.load_img(img_path, target_size=(224, 224))
    img_array = image.img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = preprocess_input(img_array)
    features = model.predict(img_array)
    return features.flatten()

# Section 4: Precompute Features for Dataset
dataset_folder = "dataset"
feature_list = []

for filename in os.listdir(dataset_folder):
    if filename.endswith((".jpg", ".jpeg", ".png")):
        img_path = os.path.join(dataset_folder, filename)
        features = extract_features(img_path)
        feature_list.append(features)

# Section 5: Find Similar Images
def find_similar_images(uploaded_img_path, feature_list, dataset_folder, top_n=5):
    uploaded_features = extract_features(uploaded_img_path)
    similarities = [
        cosine_similarity([uploaded_features], [features])[0][0]
        for features in feature_list
    ]
    sorted_indices = np.argsort(similarities)[::-1][:top_n]
    image_files = os.listdir(dataset_folder)
    similar_images = [image_files[i] for i in sorted_indices]
    return similar_images

# Section 6: Display Images
def display_images(uploaded_img_path, similar_images, dataset_folder):
    uploaded_img = cv2.imread(uploaded_img_path)
    uploaded_img = cv2.cvtColor(uploaded_img, cv2.COLOR_BGR2RGB)

    plt.figure(figsize=(15, 5))
    plt.subplot(1, len(similar_images) + 1, 1)
    plt.imshow(uploaded_img)
    plt.title("Uploaded Image")
    plt.axis("off")

    for i, img_name in enumerate(similar_images, start=2):
        img_path = os.path.join(dataset_folder, img_name)
        img = cv2.imread(img_path)
        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

        plt.subplot(1, len(similar_images) + 1, i)
        plt.imshow(img)
        plt.title(f"Similar {i-1}")
        plt.axis("off")

    plt.show()

# Section 7: Streamlit UI and File Upload
st.title("Image Similarity Finder")
st.write("Upload an image to find similar images from the dataset.")

uploaded = st.file_uploader("Upload Image", type=["jpg", "jpeg", "png"])

if uploaded:
    uploaded_img_path = os.path.join("temp", uploaded.name)
    with open(uploaded_img_path, "wb") as f:
        f.write(uploaded.getbuffer())

    top_n = st.slider("Select number of similar images", min_value=1, max_value=10, value=5)

    # Find and display similar images
    similar_images = find_similar_images(uploaded_img_path, feature_list, dataset_folder, top_n)
    display_images(uploaded_img_path, similar_images, dataset_folder)
